$microSettings: (prefix: '', columns: 12, gutter: 5px), ();

@function micro-settings($prefix: "") {
	$settings: "";
	@for $i from 1 through length($microSettings) {
		@if map-get(nth($microSettings, $i), prefix) == $prefix {
			$settings: nth($microSettings, $i);
		}
	}
	
	@if $settings == "" {
		@error "Settings for prefix \"#{$prefix}\" not found. Please call Micro mixin first.";
	}
	@return $settings;
}

@mixin micro-settings-set($settings) {
	$saved: false;
	@for $i from 1 through length($microSettings) {
		@if map-get(nth($microSettings, $i), prefix) == map-get($settings, prefix) {
			$microSettings: set-nth($microSettings, $i, $settings) !global;
			$saved: true;
		}
	}
	@if $saved == false {
		$microSettings: append($microSettings, $settings) !global;
	}
}

@mixin micro($columns, $gutter, $enablePrototypeMode: true, $prefix: "") {
	@include micro-settings-set((prefix: $prefix, columns: $columns, gutter: $gutter));
	
	#{if($enablePrototypeMode, "%#{$prefix}row, .#{$prefix}row", "%#{$prefix}row")} {
		margin-bottom: $gutter * 2;
		overflow: auto;
	}
	
	@if $enablePrototypeMode {
		@for $i from 1 through $columns {
			#{".#{$prefix}columns-#{$i}"} {
				@include micro-columns($i, $prefix);
			}
		}
		@for $i from 1 through $columns - 1 {
			#{".#{$prefix}column-offset-#{$i}"} {
				@include micro-column-offset($i, $prefix);
			}
		}
		
		$breakpoints: (min: 768px, class: '.#{$prefix}columns-sm'), (min: 990px, class: '.#{$prefix}columns-md'), (min: 1200px, class: '.#{$prefix}columns-ld');
		@for $i from 1 through length($breakpoints) {
			@media (min-width: #{map-get(nth($breakpoints, $i), min)}) {
				@for $columnCount from 1 through $columns {
					#{map-get(nth($breakpoints, $i), class)}-#{$columnCount} {
						@include micro-columns($columnCount);
					}
				}
			}
		}
		
		$breakpoints: (min: 768px, class: '.#{$prefix}column-offset-sm'), (min: 990px, class: '.#{$prefix}column-offset-md'), (min: 1200px, class: '.#{$prefix}column-offset-ld');
		@for $i from 1 through length($breakpoints) {
			@media (min-width: #{map-get(nth($breakpoints, $i), min)}) {
				@for $columnCount from 1 through $columns {
					#{map-get(nth($breakpoints, $i), class)}-#{$columnCount} {
						@include micro-column-offset($columnCount);
					}
				}
			}
		}
	}
}

@mixin micro-columns($columns, $prefix: "") {
	$settings: micro-settings($prefix);
	@if $settings != "" {
		$columnWidth: 100% / map-get($settings, columns);
		$gutter: map-get($settings, gutter);
		
		float: left;
		width: calc(#{$columns * $columnWidth} - #{$gutter * 2});
		margin-right: map-get($settings, gutter);
		margin-left: map-get($settings, gutter);
	}
}

@mixin micro-columns-query($columns, $min, $prefix: "") {
	@media (min-width: $min) {
		@include micro-columns($columns, $prefix);
	}
}

@mixin micro-column-offset($columns, $prefix: "") {
	$settings: micro-settings($prefix);
	@if $settings != "" {
		$columnWidth: 100% / map-get($settings, columns);
		$gutter: map-get($settings, gutter);
		
		margin-left: calc(#{$columns * $columnWidth} + #{$gutter});
	}
}

@mixin micro-column-offset-query($columns, $min, $prefix: "") {
	@media (min-width: $min) {
		@include micro-columns-offset($columns, $prefix);
	}
}